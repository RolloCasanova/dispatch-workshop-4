// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/RolloCasanova/dispatch-workshop-4/model"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeUsecase is an autogenerated mock type for the EmployeeUsecase type
type EmployeeUsecase struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: e
func (_m *EmployeeUsecase) CreateEmployee(e model.Employee) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Employee) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEmployees provides a mock function with given fields:
func (_m *EmployeeUsecase) GetAllEmployees() (model.Employees, error) {
	ret := _m.Called()

	var r0 model.Employees
	if rf, ok := ret.Get(0).(func() model.Employees); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Employees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByID provides a mock function with given fields: id
func (_m *EmployeeUsecase) GetEmployeeByID(id int) (*model.Employee, error) {
	ret := _m.Called(id)

	var r0 *model.Employee
	if rf, ok := ret.Get(0).(func(int) *model.Employee); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
